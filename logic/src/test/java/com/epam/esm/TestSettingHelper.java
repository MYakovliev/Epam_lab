package com.epam.esm;

import com.epam.esm.entity.Certificate;
import com.epam.esm.entity.Tag;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;
import org.springframework.test.context.ActiveProfiles;

import javax.sql.DataSource;
import java.math.BigDecimal;
import java.sql.PreparedStatement;


@ActiveProfiles(profiles = {"test"})
@Component
public class TestSettingHelper {

    private static final String CREATE_TABLE_QUERY =
            "DROP TABLE IF EXISTS gift_certificate;" +
                    "CREATE TABLE gift_certificate" +
                    "    (id INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL ," +
                    "        name VARCHAR(200) NOT NULL," +
                    "        description VARCHAR(255) NOT NULL," +
                    "        price DECIMAL(10,2) NOT NULL," +
                    "        duration INT NOT NULL," +
                    "        create_date DATETIME NOT NULL," +
                    "        last_update_date DATETIME NOT NULL," +
                    "        PRIMARY KEY (id));" +
                    "DROP TABLE IF EXISTS tag;" +
                    "CREATE TABLE tag" +
                    " (id INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL ," +
                    "        name VARCHAR(200) NOT NULL," +
                    "        PRIMARY KEY (id));" +
                    "DROP TABLE IF EXISTS gift_certificate_has_tag;" +
                    "CREATE TABLE gift_certificate_has_tag (" +
                    "        gift_certificate_id INT NOT NULL," +
                    "        tag_id INT NOT NULL," +
                    "        PRIMARY KEY (gift_certificate_id, tag_id));";
    private static final String INSERT_CERTIFICATE =
            "INSERT INTO gift_certificate (name, description, price, duration, create_date, last_update_date)" +
                    "VALUES (?, ?, ?, ? ,NOW(), NOW())";
    private static final String INSERT_TAG = "INSERT INTO tag (name) VALUES(?)";
    private static final String INSERT_REFERENCE =
            "INSERT INTO gift_certificate_has_tag (gift_certificate_id, tag_id) VALUES (?, ?)";

    private static final Certificate certificate1 = new Certificate(1, "name1", "desc1", new BigDecimal("12.12"), 20);
    private static final Certificate certificate2 = new Certificate(2, "name2", "desc2", new BigDecimal("41.12"), 10);
    private static final Certificate certificate3 = new Certificate(3, "name3", "desc3", new BigDecimal("54.69"), 15);
    private static final Tag tag1 = new Tag(1, "tag1");
    private static final Tag tag2 = new Tag(2, "tag2");
    private static final Tag tag3 = new Tag(3, "tag3");



    private DataSource dataSource;

    public TestSettingHelper(DataSource dataSource) {
        this.dataSource = dataSource;
    }

    public void setUpCertificateDatabase() {
        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
        jdbcTemplate.update(CREATE_TABLE_QUERY);
        insertCertificate(jdbcTemplate, certificate1);
        insertCertificate(jdbcTemplate, certificate2);
        insertCertificate(jdbcTemplate, certificate3);
        insertTag(jdbcTemplate, tag1);
        insertTag(jdbcTemplate, tag2);
        insertTag(jdbcTemplate, tag3);
        insertReference(jdbcTemplate, certificate1, tag1);
        insertReference(jdbcTemplate, certificate1, tag2);
        insertReference(jdbcTemplate, certificate2, tag2);
        insertReference(jdbcTemplate, certificate2, tag3);
        insertReference(jdbcTemplate, certificate3, tag3);
    }

    private void insertCertificate(JdbcTemplate jdbcTemplate, Certificate certificate) {
        jdbcTemplate.update(con -> {
            PreparedStatement ps = con.prepareStatement(INSERT_CERTIFICATE);
            ps.setString(1, certificate.getName());
            ps.setString(2, certificate.getDescription());
            ps.setBigDecimal(3, certificate.getPrice());
            ps.setInt(4, certificate.getDuration());
            return ps;
        });
    }

    private void insertTag(JdbcTemplate jdbcTemplate, Tag tag) {
        jdbcTemplate.update(con -> {
            PreparedStatement ps = con.prepareStatement(INSERT_TAG);
            ps.setString(1, tag.getName());
            return ps;
        });
    }

    private void insertReference(JdbcTemplate jdbcTemplate, Certificate certificate, Tag tag) {
        jdbcTemplate.update(con -> {
            PreparedStatement ps = con.prepareStatement(INSERT_REFERENCE);
            ps.setLong(1, certificate.getId());
            ps.setLong(2, tag.getId());
            return ps;
        });
    }
}
